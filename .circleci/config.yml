version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0.3

commands: 
  install-awscli:
    description: Install awscli
    steps:
      - run: 
          name: Install aws cli
          command: |
            apk add --update tar gzip  curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            aws --version
  install-eksctl:
    description: Install eksctl tools
    steps:
      - run: 
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
            aws --version
            
  install-kubectl:
    description: Install kubectl tools
    steps:
      - run: 
          name: Install kubectl
          command: |           
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --client

jobs:
  lint:
    docker:
      - image: circleci/python:3.6.4
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.17.5/hadolint-Linux-x86_64 && \
            sudo chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
    
  docker-build:
    working_directory: /app
    docker:
      - image: docker:17.09.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - deploy:
          name: Build & Push Docker image
          command: |
            DOCKERPATH="ntharish13/harish-capstone"
            docker build --tag=harish-capstone .
            docker login -u $DOCKERHUB_USERNAME -p "$DOCKERHUB_PASSWORD"
            docker image tag harish-capstone $DOCKERPATH:latest
            docker image push $DOCKERPATH
            docker image tag harish-capstone $DOCKERPATH:${CIRCLE_WORKFLOW_ID:0:5}
            docker image push $DOCKERPATH:${CIRCLE_WORKFLOW_ID:0:5}


  create-eks-cluster:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - run:
            name: Install tar and gzip
            command: |
              apk add --update tar gzip nodejs npm curl  
        - run:
            name: install_awscli
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install 
        - run:
            name: install_aws_eks
            command: |
              mkdir -p src
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C src
              chmod +x src/eksctl
              SUDO=""
              if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                  SUDO="sudo"
              fi
                  $SUDO mv src/eksctl /usr/local/bin/
                  rmdir src
        - run:
            name: install_kubectl
            command: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
              kubectl version --client
        - run:
            name: AWS EKS cluster creation
            command: |
             eksctl create cluster --name harish-capstone --region $AWS_DEFAULT_REGION --zones us-east-1a,us-east-1b,us-east-1c,us-east-1d 
             ## --node-type t3.large --nodes-min 2 --nodes-max 4 --managed
              
        - run:
            name: AWS EKS get cluster creation
            command: |
              eksctl utils describe-stacks --region $AWS_DEFAULT_REGION --cluster=harish-capstone
              eksctl get cluster --name=harish-capstone --region=$AWS_DEFAULT_REGION

  deploy-eks-cluster:
      executor: aws-eks/python3
      steps:
        - checkout
        - kubernetes/install
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: harish-capstone
            install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: deploy.yml
            resource-name: deployment/harish-capstone
        - kubernetes/create-or-update-resource:
            resource-file-path: service.yml
            resource-name: service/harish-capstone

  check-eks-cluster:
    executor: aws-eks/python3
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: harish-capstone
      - run:
          name: Check Cluster status
          command: |
              echo '------------------Describe Deployment---------------------'
              kubectl describe deployment capstone
              echo '------------------Get Deployment-----------------------------'
              kubectl get deployments
              echo '------------------svc,nodes--------------------------------'
              kubectl get svc
              kubectl get nodes
              echo '-------------------pods-------------------------------------'
              kubectl get pods --all-namespaces
              echo '-------------------config view------------------------------'
              kubectl config view

  eks-rolling-deployment:
    executor: aws-eks/python3
    steps:
      - checkout
      - kubernetes/install-kubectl
      - aws-cli/setup
      #- install-eksctl 
      - run:
          name: Rolling Deployment      
          command: |                      
            kubectl rollout restart deployment capstone
            echo "----Rolling Deployment History-----"            
            kubectl rollout history deployment/capstone
            echo "---------Replica History-----------"  
            kubectl get rs    
            echo '---------- SVC,Nodes ---------------'        
            kubectl get svc
            kubectl get nodes
            echo '---------- Deployment --------------'
            kubectl get deployment
            echo '---------- PODs ---------------------'
            kubectl get pod
            echo "----LB after rolling deployment------"
       
workflows:
  default:
    jobs:
      #- lint
      - docker-build
      ##    requires: [lint]
      - create-eks-cluster
      - deploy-eks-cluster:
          requires: [docker-build]
      - check-eks-cluster:
          requires: [deploy-eks-cluster]
      #- eks-rolling-deployment:
      ##    requires: [check-eks-cluster]