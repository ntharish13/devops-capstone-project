version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0.3

commands: 
  install-awscli:
    description: Install awscli
    steps:
      - run: 
          name: Install aws cli
          command: |
            apk add --update tar gzip  curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            aws --version
  install-eksctl:
    description: Install eksctl tools
    steps:
      - run: 
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
            aws --version
            
  install-kubectl:
    description: Install kubectl tools
    steps:
      - run: 
          name: Install kubectl
          command: |           
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --client

jobs:
  lint:
    docker:
      - image: circleci/python:3.6.4
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: lint
          command: |
            python3 -m venv devops
            . devops/bin/activate
            make install
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.17.5/hadolint-Linux-x86_64 && \
            sudo chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . devops/bin/activate
            make lint
    
  docker-build:
    working_directory: /app
    docker:
      - image: docker:17.09.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - deploy:
          name: Build & Push Docker image
          command: |
            DOCKERPATH="ntharish13/harish-capstone"
            docker build --tag=harish-capstone .
            docker login -u $DOCKERHUB_USERNAME -p "$DOCKERHUB_PASSWORD"
            docker image tag harish-capstone $DOCKERPATH:latest
            docker image push $DOCKERPATH
            docker image tag harish-capstone $DOCKERPATH:${CIRCLE_WORKFLOW_ID:0:5}
            docker image push $DOCKERPATH:${CIRCLE_WORKFLOW_ID:0:5}


  create-and deploy-eks-cluster:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/repo
    steps:
      - checkout
      - aws-cli/setup
      - kubernetes/install
      - install-eksctl        
      - run:
          name: Create AWS EKS Cluster
          command: |    
            aws sts get-caller-identity                   
            eksctl create cluster --name harish-capstone-${CIRCLE_WORKFLOW_ID:0:5} --region ${AWS_DEFAULT_REGION} --nodegroup-name harish-capstone-node --node-type t3.micro --nodes-min 2 --nodes-max 4 --managed     
            eksctl utils describe-stacks --region=${AWS_DEFAULT_REGION} --cluster=harish-capstone-${CIRCLE_WORKFLOW_ID:0:5}
            eksctl get cluster --name=harish-capstone-${CIRCLE_WORKFLOW_ID:0:5} --region=${AWS_DEFAULT_REGION}
      - run:
          name: Deploy image into eks cluster
          command: |                          
            aws eks update-kubeconfig --name harish-capstone-${CIRCLE_WORKFLOW_ID:0:5}              
            export KUBECONFIG=~/.kube/config
            kubectl apply -f service.yml
            kubectl apply -f deploy.yml
            echo '------------------Describe Deployment---------------------'
            kubectl describe deployment harish-capstone
            echo '------------------Get Deployment-----------------------------'
            kubectl get deployments
            echo '------------------svc,nodes--------------------------------'
            kubectl get svc
            kubectl get nodes
            echo '-------------------pods-------------------------------------'
            kubectl get pods --all-namespaces
            echo '-------------------config view------------------------------'
            kubectl config view                         

  eks-rolling-deployment:
    executor: aws-eks/python3
    steps:
      - checkout
      - kubernetes/install-kubectl
      - aws-cli/setup
      #- install-eksctl 
      - run:
          name: Rolling Deployment      
          command: |                      
            kubectl rollout restart deployment harish-capstone
            echo "----Rolling Deployment History-----"            
            kubectl rollout history deployment/harish-capstone
            echo "---------Replica History-----------"  
            kubectl get rs    
            echo '---------- SVC,Nodes ---------------'        
            kubectl get svc
            kubectl get nodes
            echo '---------- Deployment --------------'
            kubectl get deployment
            echo '---------- PODs ---------------------'
            kubectl get pod
            echo "----LB after rolling deployment------"
       
workflows:
  default:
    jobs:
      - lint
      - docker-build:
          requires: [lint]
      - create-and deploy-eks-cluster:
          requires: [docker-build]
      #- eks-rolling-deployment:
      ##    requires: [check-eks-cluster]